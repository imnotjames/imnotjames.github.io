{"version":3,"file":"component---src-templates-on-my-mind-thought-js-1ef5b7268a6a2ff3fd8f.js","mappings":"2LAGA,MAAMA,GAAqBC,EAAAA,EAAAA,KAAGC,ICHsBC,EDGtB,klCCFvBC,IACHA,EAAMD,EAAQE,MAAM,IAEtBF,EAAQC,IAAMA,EDDcF,ECErBC,IALM,IAAqCA,EAASC,EDwE7D,MAAME,EAA2BC,EAAAA,OAAOC,QAAOC,WAAA,CAAAC,YAAA,qCAAAC,YAAA,eAAdJ,CAAc,QAC3CP,GAGEY,EAAkBC,IAAkB,IAAjB,QAAEC,GAASD,EAChC,OACIE,EAAAA,cAACT,EAAwB,CAAEU,wBAAyB,CAAEC,OAAQH,IAAa,C,kGEzEnF,MAAMI,EAAiBX,EAAAA,QAAOY,QAAOV,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAAdJ,CAAc,iBAI/Ba,EAAcb,EAAAA,QAAOc,GAAEZ,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAATJ,CAAS,MAIvBe,EAAgBf,EAAAA,QAAOgB,OAAMd,WAAA,CAAAC,YAAA,yBAAAC,YAAA,eAAbJ,CAAa,qBAI7BiB,EAAcjB,EAAAA,QAAOC,QAAOC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAAdJ,CAAc,mFAC5BP,EAAAA,GASN,SAASyB,EAAOZ,GAAsC,IAApC,YAAEa,EAAW,KAAEC,EAAI,KAAEC,EAAI,KAAEC,GAAMhB,EASjD,MARoB,iBAATe,IACTA,EAAOA,EAAKE,QAAQ,SAAU,cAC9BF,EAAOA,EAAKE,QAAQ,UAAW,eAG/BF,EAAOA,EAAKE,QAAQ,SAAU,yBAI9Bf,EAAAA,cAACG,EAAc,KACbH,EAAAA,cAACO,EAAa,KACZP,EAAAA,cAACK,EAAW,KACVL,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAIH,GACPH,EAAYO,MAAQ,gBAI3BlB,EAAAA,cAACS,EAAW,CAACR,wBAAyB,CAAEC,OAAQW,KAGtD,C,oICxCA,MAAMM,EAAsB3B,EAAAA,QAAO4B,GAAE1B,WAAA,CAAAC,YAAA,0CAAAC,YAAA,eAATJ,CAAS,0FAQ/B6B,EAAoBvB,IAAyB,IAAxB,SAAEwB,EAAQ,KAAEC,GAAMzB,EACzC,OACIE,EAAAA,cAAA,WACIA,EAAAA,cAACmB,EAAmB,KAChBnB,EAAAA,cAAA,UACKsB,GACGtB,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAE,cAAgBK,EAASE,OAAOZ,KAAQa,IAAI,QAAO,KACpDH,EAASX,YAAYO,OAIpClB,EAAAA,cAAA,UACKuB,GACGvB,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAE,cAAgBM,EAAKC,OAAOZ,KAAQa,IAAI,QAC3CF,EAAKZ,YAAYO,KAAK,QAKrC,EAIC,SAASQ,EAAeC,GAcpC,IAZKC,MACEC,MACEC,cACEC,MAAOC,IAEV,QACDC,EAAO,SACPX,EAAQ,KACRC,GACD,SACDW,GACHP,EAEH,OACE3B,EAAAA,cAACmC,EAAAA,EAAM,CAACD,SAAUA,EAAUH,MAAOC,GACjChC,EAAAA,cAACoC,EAAAA,EAAG,CACAL,MAAK,eAAiBE,EAAQtB,YAAYO,KAC1CmB,YAAaJ,EAAQtB,YAAY0B,aAAeJ,EAAQK,UAE5DtC,EAAAA,cAACU,EAAAA,EAAO,CACJC,YAAasB,EAAQtB,YACrBC,KAAMqB,EAAQrB,KACdE,KAAI,cAAgBmB,EAAQT,OAAOZ,KACnCC,KAAMoB,EAAQpB,OAGlBb,EAAAA,cAACqB,EAAiB,CAACC,SAAUA,EAAUC,KAAMA,IAGnD,C","sources":["webpack://notjam.es/./src/components/markdown.js","webpack://notjam.es/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://notjam.es/./src/components/thought.js","webpack://notjam.es/./src/templates/on-my-mind-thought.js"],"sourcesContent":["import React from 'react';\nimport { css, styled } from \"styled-components\";\n\nconst MarkdownContentCss = css`\n  font-size: 1rem;\n\n  p, ul, h1, h2, h3, h4, h5, h6, blockquote {\n    margin-bottom: 1.5rem;\n  }\n\n  p:first-child + br {\n    display: none;\n  }\n\n  p {\n    line-height: 1.5rem;\n\n    code {\n      padding: 3px 6px;\n    }\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-size: 1.5rem;\n  }\n  \n  blockquote {\n    padding-left: 1.75rem;\n  }\n\n  ul {\n    list-style: '▶';\n    padding-left: 0.5rem;\n\n    li {\n      padding-bottom: 0.5rem;\n      padding-left: 0.5rem;\n    }\n  }\n\n  .gatsby-highlight {\n    &:before {\n      content: \"Code\";\n      display: inline-block;\n      position: absolute;\n      top: -7px;\n      left: 0;\n      text-transform: uppercase;\n      font-size: 10px;\n      line-height: 12px;\n      padding-right: 8px;\n      letter-spacing: 2px;\n\n      background: #FFF;\n    }\n\n    &[data-language]:before {\n      content: attr(data-language);\n    }\n\n    pre {\n      margin-bottom: 0;\n    }\n\n    position: relative;\n    margin-bottom: 1.75rem;\n    padding: 16px 0;\n    border-top: 1px solid #222;\n    border-bottom: 1px solid #222;\n  }\n`;\n\nconst MarkdownContentContainer = styled.section`\n  ${MarkdownContentCss}\n`;\n\nconst MarkdownContent = ({ content }) => {\n    return (\n        <MarkdownContentContainer  dangerouslySetInnerHTML={{ __html: content }} />\n    )\n}\n\nexport {\n    MarkdownContentCss,\n    MarkdownContent,\n}","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from 'styled-components';\nimport { MarkdownContentCss } from \"./markdown\";\n\nconst ThoughtArticle = styled.article`\n    clear: both;\n`;\n\nconst ThoughtDate = styled.h1`\n\n`;\n\nconst ThoughtHeader = styled.header`\n  font-size: 3rem;\n`;\n\nconst ThoughtBody = styled.section`\n    ${MarkdownContentCss};\n\n    p:first-child img:first-child {\n      float: right;\n      max-width: 40%;\n      margin-left: 16px;\n    }\n`;\n\nfunction Thought ({ frontmatter, slug, html, path }) {\n  if (typeof html === 'string') {\n    html = html.replace(/<\\/p>/g, '</p><br />');\n    html = html.replace(/<\\/ul>/g, '</ul><br />');\n\n    // Such a hack but I mean maybe it'll work\n    html = html.replace(/<img /g, '<img loading=\"lazy\" ');\n  }\n\n  return (\n    <ThoughtArticle>\n      <ThoughtHeader>\n        <ThoughtDate>\n          <Link to={path}>\n            {frontmatter.date || '20XX/YY/ZZ'}\n          </Link>\n        </ThoughtDate>\n      </ThoughtHeader>\n      <ThoughtBody dangerouslySetInnerHTML={{ __html: html }} />\n    </ThoughtArticle>\n  );\n}\n\nexport {\n  Thought,\n}\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from \"styled-components\";\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {Thought} from \"../components/thought\";\n\nconst ThoughtNavigationUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style: none;\n  padding: 0;\n`;\n\nconst ThoughtNavigation = ({ previous, next }) => {\n    return (\n        <nav>\n            <ThoughtNavigationUl>\n                <li>\n                    {previous && (\n                        <Link to={`/on-my-mind${previous.fields.slug}`} rel=\"prev\">\n                            ← {previous.frontmatter.date}\n                        </Link>\n                    )}\n                </li>\n                <li>\n                    {next && (\n                        <Link to={`/on-my-mind${next.fields.slug}`} rel=\"next\">\n                            {next.frontmatter.date} →\n                        </Link>\n                    )}\n                </li>\n            </ThoughtNavigationUl>\n        </nav>\n    )\n}\n\nexport default function ThoughtTemplate(\n    {\n        data: {\n          site: {\n            siteMetadata: {\n              title: siteTitle\n            }\n          },\n          thought,\n          previous,\n          next\n        },\n        location\n    }\n) {\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n          title={`Thoughts on ${thought.frontmatter.date}`}\n          description={thought.frontmatter.description || thought.excerpt}\n        />\n      <Thought\n          frontmatter={thought.frontmatter}\n          slug={thought.slug}\n          path={`/on-my-mind${thought.fields.slug}`}\n          html={thought.html}\n        />\n\n      <ThoughtNavigation previous={previous} next={next} />\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query ThoughtBySlug($slug: String!, $previous: String, $next: String) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    thought: markdownRemark(fields: { slug: { eq: $slug }, sourceName: { eq: \"thoughts\" } }) {\n      id\n      html\n      excerpt\n      fields {\n          slug\n      }\n      frontmatter {\n        date(formatString: \"YYYY/MM/DD\")\n      }\n    }\n    previous: markdownRemark(fields: { slug: { eq: $previous }, sourceName: { eq: \"thoughts\" } }) {\n        id\n        fields {\n            slug\n        }\n        frontmatter {\n            date(formatString: \"YYYY/MM/DD\")\n        }\n    }\n    next: markdownRemark(fields: { slug: { eq: $next }, sourceName: { eq: \"thoughts\" } }) {\n        id\n        fields {\n            slug\n        }\n        frontmatter {\n            date(formatString: \"YYYY/MM/DD\")\n        }\n    }\n  }\n`;\n"],"names":["MarkdownContentCss","css","_templateObject","strings","raw","slice","MarkdownContentContainer","styled","section","withConfig","displayName","componentId","MarkdownContent","_ref","content","React","dangerouslySetInnerHTML","__html","ThoughtArticle","article","ThoughtDate","h1","ThoughtHeader","header","ThoughtBody","Thought","frontmatter","slug","html","path","replace","Link","to","date","ThoughtNavigationUl","ul","ThoughtNavigation","previous","next","fields","rel","ThoughtTemplate","_ref2","data","site","siteMetadata","title","siteTitle","thought","location","Layout","SEO","description","excerpt"],"sourceRoot":""}