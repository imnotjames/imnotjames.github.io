<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[DEFINITIVELY NOT JAMES]]></title><description><![CDATA[WORD WORDS WORDS WORDS]]></description><link>https://notjam.es</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 22 Feb 2021 17:59:09 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[There were two posts on the front page of Hacker News yesterday -
Choose Boring Technology and Choose Exciting Technology.
Both make are…]]></description><link>https://notjam.es/2021-02-22</link><guid isPermaLink="false">https://notjam.es/2021-02-22</guid><pubDate>Mon, 22 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/2A0jXvUa3KOufBYT53/giphy-downsized.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;There were two posts on the front page of Hacker News yesterday -
&lt;a href=&quot;https://news.ycombinator.com/item?id=26211721&quot;&gt;Choose Boring Technology&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=26212563&quot;&gt;Choose Exciting Technology&lt;/a&gt;.
Both make are great points and are compelling on their own, but they’re
completely at odds with one another.&lt;/p&gt;
&lt;p&gt;Boring Technology gives examples like PHP, Postgres, Java, and all other
sorts of technology that’s been around for a while and is.. well.. not as
new and shiny.  Battle-tested technology.  Things that everyone on the team
knows.  The argument for boring technology is generally that you won’t
get anything that surprises you.&lt;/p&gt;
&lt;p&gt;Exciting Technology is … uh.. okay, so bear with me: the examples given
are Cassandra (at least 12 years old), MongoDB (&gt;11 years),
Clojure (&gt;14 years), and NodeJS (..let’s not touch that).  For the sake of
simplicity, let’s say Exciting Technology is technology that an
engineer is less familiar with and as such cannot for certain say
that it will solve the issues they currently have - but there are
some shiny new features that they really like!&lt;/p&gt;
&lt;p&gt;Let’s … not talk touch on my personal experiences with Cassandra, Mongo,
and the like.  Let’s not touch on the issues that seemed to be the case
at Etsy’s SRE &amp;#x26; maintenance of servers.  Let’s not even touch on all the
fighting going on in the HN comments.&lt;/p&gt;
&lt;p&gt;Instead, I think it’s interesting to talk about the kinds of people
that do this because I don’t think that either of these articles will
change people’s minds.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Managing-Humans-Humorous-Software-Engineering-dp-1484221575/dp/1484221575/ref=dp_ob_title_bk&quot;&gt;Managing Humans by Michael Lopp&lt;/a&gt; is a book that’s not just about
managing humans.  In it he writes about engineering culture, different
personalities you might find, and communication skills.  Things that are
sometimes considered tangential to management (but are very important!)&lt;/p&gt;
&lt;p&gt;The chapter “Stables and Volatiles” details two archetypes that you’ll
commonly see within engineering cultures. &lt;/p&gt;
&lt;p&gt;Stables are engineers that happily work within a set of confines - even
appreciating these confines such as direction and deadlines.  They assess
risk, carefully mitigate failure, and aim for predictable outcomes.&lt;/p&gt;
&lt;p&gt;Volatiles will show up, stomp on everything that exists, and leave a trail
of disruption in their wake.  However, when they build.. they sure build a LOT.
In some cases, what they make will be novel and would not have occurred
otherwise.&lt;/p&gt;
&lt;p&gt;Stables and Volatiles are at odds with one another.  They do not get along
on everything but a team with both can be incredibly successful - even if
there’s a bit of conflict along the way.  Volatiles become stables,
and sometime stables become volatiles, and neither is really good or bad.
They just &lt;em&gt;are&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;These archetypes are applicable to the argument about boring versus exciting
technology.  Stables will more likely than not choose the familiar.
Volatiles will sometimes choose the foreign.  Neither is right or wrong -
at least not intrinsically.  Instead, it’s gotta be a balance and you’ve
got to use the right tool for the right job.&lt;/p&gt;
&lt;p&gt;If you lean too far towards boring technology nothing will be pushed forward.
If you lean too far towards the exciting you’ll end up with a backend written
in &lt;a href=&quot;https://www.little-lang.org/&quot;&gt;Little&lt;/a&gt; using a home-grown &lt;a href=&quot;https://dfithian.github.io/2021/02/15/database-implementation-part-1.html&quot;&gt;database written in Haskell&lt;/a&gt;.  That..
does sound pretty exciting, though, doesn’t it?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[There’s a nifty new Electron alternative called Tauri which purports
to be more memory efficient than Electron!  Competition is awesome…]]></description><link>https://notjam.es/2021-02-20</link><guid isPermaLink="false">https://notjam.es/2021-02-20</guid><pubDate>Sat, 20 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/FPjbHO0jJxGsE/giphy.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;There’s a nifty new Electron alternative called &lt;a href=&quot;https://tauri.studio/&quot;&gt;Tauri&lt;/a&gt; which purports
to be more memory efficient than Electron!  Competition is awesome!&lt;/p&gt;
&lt;p&gt;Tauri is written in Rust and &lt;a href=&quot;https://tauri.studio/en/docs/getting-started/technical-details#user-interface&quot;&gt;utilizes a webview instead of bundling&lt;/a&gt;
the entire Chrome browser within it.&lt;/p&gt;
&lt;p&gt;Using a webview isn’t a particularly new idea - &lt;a href=&quot;https://deskgap.com/&quot;&gt;DeskGap&lt;/a&gt;, &lt;a href=&quot;https://github.com/pojala/electrino&quot;&gt;Electrino&lt;/a&gt;,
&lt;a href=&quot;https://github.com/neutralinojs/neutralinojs&quot;&gt;Neutralino&lt;/a&gt;, and others.  On Linux, this works pretty okay!  You get a
webkit rendering engine (of an unknown version).  On MacOS you get
the Safari flavor of webkit.  On Windows 7 you often get IE11 which..
yikes.  Then on earlier Windows 10 you get the old non-Webkit Edge,
newer versions mostly get Webkit Edge.  It’s.. a little all over.&lt;/p&gt;
&lt;p&gt;The big thing that Electron brings is that you know exactly what version
of Webkit you’re building against and can cut down on the pain you
feel when testing.&lt;/p&gt;
&lt;p&gt;The other thing is that Electron has a lot of batteries already included
and while Tauri has a lot of features in the works - they just aren’t
there yet!  However, the roadmap looks great and who knows -
maybe it’d really hit that right balance between performance
and features without having to write a native app version.&lt;/p&gt;
&lt;p&gt;I dunno, though, I feel that Electron being resource hungry isn’t the
end of the world.  For the most part, you can cut down on memory in
Electron in the same way you would a standard web app on Chrome -
through &lt;a href=&quot;https://www.electronjs.org/docs/tutorial/performance&quot;&gt;profiling and optimization&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[The Perseverance rover confirmed a successful touchdown yesterday,
February 19th at ~3:55PM EST.  The mission is one of the most ambitious…]]></description><link>https://notjam.es/2021-02-19</link><guid isPermaLink="false">https://notjam.es/2021-02-19</guid><pubDate>Fri, 19 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;
            &lt;img src=&apos;https://media.giphy.com/media/nT8678QggafnBb5g8I/giphy.gif&apos; alt=&apos;null&apos; loading=&apos;lazy&apos; /&gt;
          &lt;/p&gt;
&lt;p&gt;The Perseverance rover confirmed a successful touchdown yesterday,
February 19th at ~3:55PM EST.  The mission is one of the most ambitious
we’ve sent to the red planet - but not just because of the rover
(which, itself, is the most complex and featured rover we’ve sent).&lt;/p&gt;
&lt;p&gt;The EDL (Entry, Descent, and Landing) platform was also for more advanced
than any other we’d sent - with the descent into the Martian atmosphere
being yet another part of the experiment.  The ablative heat shielding
covered the bottom of the capsule - with a type of plating covering it
which upon heating would vaporize and be carried away from the
Perseverance capsule.&lt;/p&gt;
&lt;p&gt;The Perseverance also carried 661lbs of tungsten weights.  However, just
because they’re dead weight doesn’t mean they won’t serve a purpose.&lt;/p&gt;
&lt;p&gt;Two 165 pound blocks of tungsten kept Perseverance in a stable and balanced
spin on its journey from Earth.  This prevented any one side of the capsule
from getting too hot.  These are jettisoned 900 miles or so above Mars as
they’d no longer be needed.  Waste not, though.  These two tungsten blocks
will slam into the surface of Mars at 9,000 mph or so and is
&lt;a href=&quot;https://www.nytimes.com/2021/02/17/science/nasa-mars-landing.html&quot;&gt;part of a very vital experiment&lt;/a&gt;.  The InSight lander has a
seismometer and even at 2000 miles away it’ll be listening for Perseverance
knocking with these tungsten payloads.&lt;/p&gt;
&lt;p&gt;Removing those two tungsten blocks is an important part of the entry phase
because while balance is required during the journey, the entry requires
debalancing.  Because one side of the capsule is heavier than the other
the entry angle will be at 16°.  This leads to a slight amount of lift
experienced by the craft, allowing the descent to be controlled via
&lt;a href=&quot;https://en.wikipedia.org/wiki/Reaction_control_system&quot;&gt;RCS (Reaction Control System)&lt;/a&gt; powered rotation - rotate left to
cause the lift to push you one way, right to push the other, and go left
and right consistently to burn off speed.  This is all autonomous!&lt;/p&gt;
&lt;p&gt;There’s also six 55lb tungsten masses that ensure landing is aligned.
These are jettisoned right before firing the parachute and are used to
ensure that the radar will be oriented in the correct direction.  While
the RCS was fired roughly 2,256 times during atmosphere entry, at this point
they aren’t a whole lot of use.  These tungsten blocks are jettisoned two at
a time, and will cause the craft to roll into the exact orientation needed
for the rest of the descent.&lt;/p&gt;
&lt;p&gt;Haven’t heard yet if InSight heard Perseverance’s hello to start a welcome
party, but all of this was fantastically interesting to me and I’m always
surprised at how much NASA can achieve.&lt;/p&gt;
&lt;p&gt;Wanna watch it?  &lt;a href=&quot;https://www.twitch.tv/videos/919215638&quot;&gt;They streamed the landing on twitch!&lt;/a&gt;
What an amazing future we live in.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[In 2019, the World Health Organization recognized burnout as an occupational phenomenon in the ICD-11.
However, a relatively new article by…]]></description><link>https://notjam.es/2021-02-18</link><guid isPermaLink="false">https://notjam.es/2021-02-18</guid><pubDate>Thu, 18 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;
            &lt;img src=&apos;https://media.giphy.com/media/cVWZ8dVs5VOEvdhH1M/giphy.gif&apos; alt=&apos;null&apos; loading=&apos;lazy&apos; /&gt;
          &lt;/p&gt;
&lt;p&gt;In 2019, the World Health Organization &lt;a href=&quot;https://www.who.int/news/item/28-05-2019-burn-out-an-occupational-phenomenon-international-classification-of-diseases&quot;&gt;recognized burnout as an occupational phenomenon in the ICD-11&lt;/a&gt;.
However, a relatively new &lt;a href=&quot;https://hbr.org/2021/02/beyond-burned-out&quot;&gt;article by HBR about burnout points at studies&lt;/a&gt; that show the pandemic has
been causing burnout to run rampant since early 2020.  “Knowledge workers” are now mostly working remotely -
looking at Zoom, for example, they went from 10 million to 200 million active users effectively overnight.&lt;/p&gt;
&lt;p&gt;To clarify: Burnout is really just another term for chronic stress causing emotional, mental, and even physical damage.&lt;/p&gt;
&lt;p&gt;Lots of companies just look at it as a personal problem.  Get better at self-care, do some yoga, use those new-fangled
meditation apps.  Those might help soothe some of the pains caused by chronic stress, but they don’t get to the
actual causes of it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.researchgate.net/publication/246546370_Making_a_significant_difference_with_burnout_interventions_Researcher_and_practitioner_collaboration&quot;&gt;A 2012 Study by Christina Maslach, Michael Leither and Susan Jackson&lt;/a&gt; point at the causes
of burnout to be more organizational than personal.  The top cause?  Unsustainable workload.  Also in there
is the lack of a supportive community.&lt;/p&gt;
&lt;p&gt;If you take a look over the &lt;a href=&quot;https://www.nber.org/papers/w27612&quot;&gt;NBER’s working paper on the impact of COVID-19&lt;/a&gt; - what do you see?
Remote workers on average work 10% more during all of this.  People also have more shorter meetings than ever
before.  You end up with a heavier workload and sparser, shorter action-oriented meetings - without the same
affordances given to social interactions unrelated to the work at hand.&lt;/p&gt;
&lt;p&gt;The HBR article I’d linked above did a survey of 1500 workers - and found that nearly 90% said that their
work life was getting worse, more than half said their work was becoming more demanding, and half felt that
they couldn’t maintain a strong connection with their friends.&lt;/p&gt;
&lt;p&gt;This isn’t really a new phenomenon, either.  &lt;a href=&quot;https://twitter.com/elonmusk/status/1067175527180513280?lang=en&quot;&gt;Some CEOs of public companies have been pushing for 80
hours a week of work&lt;/a&gt;, &lt;a href=&quot;https://www.buzzfeednews.com/article/carolineodonovan/how-ubers-hard-charging-corporate-culture-left-employees&quot;&gt;Uber’s employees were effectively not sleeping&lt;/a&gt;,
&lt;a href=&quot;https://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html&quot;&gt;Amazon worked people to exhaustion on Easter Sunday and Thanksgiving weekend&lt;/a&gt;, and if you
want to hear me go off about even my personal experience, just ask me about Venmo’s practices.
The superbowl “war room” that literally means being in the office for 24 hours without sleep is
just the tip of that iceberg.&lt;/p&gt;
&lt;p&gt;Really, though - what I’m trying to say is that burnout is very real, very scary, and it’s gotta get
addressed sometime.  I don’t think that time is now, but it’s gotta be soon.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.businessinsider.com/research-rheingans-digital-enablers-five-hour-workday-productivity&quot;&gt;Maybe the 5 hour work day could become the norm&lt;/a&gt;.  I doubt it though.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Having lived in Texas for a few years I know a number of Texans right now that
have not had power for nearly 48 hours with freezing causing…]]></description><link>https://notjam.es/2021-02-17</link><guid isPermaLink="false">https://notjam.es/2021-02-17</guid><pubDate>Wed, 17 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;
            &lt;img src=&apos;https://media.giphy.com/media/S5i0xeZEzcescmDFaq/giphy-downsized.gif&apos; alt=&apos;null&apos; loading=&apos;lazy&apos; /&gt;
          &lt;/p&gt;
&lt;p&gt;Having lived in Texas for a few years I know a number of Texans right now that
have not had power for nearly 48 hours with freezing causing a real terrible
situation.&lt;/p&gt;
&lt;p&gt;Much of this is caused because &lt;a href=&quot;https://www.texastribune.org/2011/02/08/texplainer-why-does-texas-have-its-own-power-grid/&quot;&gt;Texas has an isolated power grid&lt;/a&gt; with 3
interconnects to other states and 3 to Mexico - through what is known as ERCOT.
ERCOT was founded in 1970 and covers most of Texas.  Much of this was fueled by
a secessionist attitude many Texas lawmakers take, as well as a want to avoid
federal regulations.  A push to deregulate even more was in the late 90s and
much of ERCOT is powered by an aging and neglected coal and natural gas
infrastructure.&lt;/p&gt;
&lt;p&gt;I’ve seen a number of talking points saying that this is all because renewable
energy such as wind and solar are failing Texas - which isn’t the case.
Not only do modern wind turbines handle ice and snow through
&lt;a href=&quot;https://www.forbes.com/sites/scottcarpenter/2021/02/16/why-wind-turbines-in-cold-climates-dont-freeze-de-icing-and-carbon-fiber/&quot;&gt;some neat mechanisms&lt;/a&gt;, most of the 80% power deficit has to do with the
[natural gas, coal, and nuclear losing capacity]23.  Natural gas pipelines froze, coal
couldn’t be shipped, and nuclear plants did not have the abilities to
prevent the cooling water reservoirs from potentially freezing.&lt;/p&gt;
&lt;p&gt;This all ends up hurting the citizens of Texas - where rolling power outages
turning into several day outages as ERCOT scrambles to make up for the
shortages.  Folks are cold, hungry, and don’t have water.&lt;/p&gt;
&lt;p&gt;It’s a bad situation.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Have you ever wanted to make an interface for a program, but
realized web just isn’t for you?  Don’t want to delve into
the madness and…]]></description><link>https://notjam.es/2021-02-16</link><guid isPermaLink="false">https://notjam.es/2021-02-16</guid><pubDate>Tue, 16 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/LcfBYS8BKhCvK/giphy.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Have you ever wanted to make an interface for a program, but
realized web just isn’t for you?  Don’t want to delve into
the madness and incantations needed to utilize &lt;a href=&quot;https://en.wikipedia.org/wiki/Ncurses&quot;&gt;new curses&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;There’s a &lt;a href=&quot;https://www.willmcgugan.com/blog/tech/post/building-rich-terminal-dashboards/&quot;&gt;new blog post by Will McGugan&lt;/a&gt; about his &lt;a href=&quot;https://github.com/willmcgugan/rich&quot;&gt;Python library Rich&lt;/a&gt;,
used to create beautiful CLIs.  The blog post details some basic
creation of dashboards using the various APIs available through Rich.
Having written a few things with ncurses, I can safely say that this
is a much more pleasant experience.&lt;/p&gt;
&lt;p&gt;But what about folks over in javascript land?  Heck, while I love
Python I also adore Javascript.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://www.npmjs.com/package/@blessed/neo-blessed&quot;&gt;blessed&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/@blessed/blessed-contrib&quot;&gt;blessed-contrib&lt;/a&gt;, and &lt;a href=&quot;https://www.npmjs.com/package/react-blessed&quot;&gt;react-blessed&lt;/a&gt;.  Blessed is a
Javascript library to create CLIs, but you’ll notice that the react API
it has is really game changing.  Using a special &lt;code class=&quot;language-text&quot;&gt;blessed&lt;/code&gt; renderer in React
you can create CLI interfaces with the same paradigms as any React 16
application.  Combine that with the contrib package and you can have real
time terminal dashboards that show graphs, maps, spark lines, markdown,
and even picture rendering.&lt;/p&gt;
&lt;p&gt;It’s one thing to show off your cool new graphical web app.  It’s another
entirely to show off your 100% hacker terminal app.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[In Javascript, functions always have variadic arguments.  This leads to
some performance hits because there always has to be an adapter when…]]></description><link>https://notjam.es/2021-02-15</link><guid isPermaLink="false">https://notjam.es/2021-02-15</guid><pubDate>Mon, 15 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;
            &lt;img src=&apos;https://media.giphy.com/media/3oriNYQX2lC6dfW2Ji/giphy.gif&apos; alt=&apos;null&apos; loading=&apos;lazy&apos; /&gt;
          &lt;/p&gt;
&lt;p&gt;In Javascript, &lt;a href=&quot;https://en.wikipedia.org/wiki/Variadic_function&quot;&gt;functions always have variadic arguments&lt;/a&gt;.  This leads to
some performance hits because there always has to be an adapter when
using a JIT compilation.  The adapter required creating a new frame
in-between the caller and callee frames.
Creating a frame is super costly.&lt;/p&gt;
&lt;p&gt;On the v8 development website a &lt;a href=&quot;https://v8.dev/blog/adaptor-frame&quot;&gt;new blog entry was posted&lt;/a&gt; which details
how this process works and what they’ve done to dramatically improve
function calls by optimizing this javascript feature.&lt;/p&gt;
&lt;p&gt;How’d they solve it?  They work through the arguments array backwards
so they don’t really need to know how many arguments are in the stack,
but they can assume that there’s at least the enough arguments to
satisfy the parameter count - even if the arguments are &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;.
This allows for cutting up the formal parameters and the extra variadic
arguments to pass them to the callee frame in a way that doesn’t require
extra lookups or an extra frame that will calculate it all.&lt;/p&gt;
&lt;p&gt;No more overhead!  Super fast!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[There’s something about the fact that I’m taking an at-home class for cooking
from a world-renowned french cuisine Chef that’s feeling like…]]></description><link>https://notjam.es/2021-02-11</link><guid isPermaLink="false">https://notjam.es/2021-02-11</guid><pubDate>Thu, 11 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;
            &lt;img src=&apos;https://media.giphy.com/media/demgpwJ6rs2DS/giphy.gif&apos; alt=&apos;null&apos; loading=&apos;lazy&apos; /&gt;
          &lt;/p&gt;
&lt;p&gt;There’s something about the fact that I’m taking an at-home class for cooking
from a world-renowned french cuisine Chef that’s feeling like got an
uncomfortable “rich people things” vibe to it.&lt;/p&gt;
&lt;p&gt;It makes me think about &lt;a href=&quot;https://www.newyorker.com/culture/kitchen-notes/the-joylessness-of-cooking&quot;&gt;a New Yorker article about the “Joylessness of Cooking”&lt;/a&gt;.
In theory, I love to cook.  It’s a way of peering through time and culture to see
how different people live and have lived.&lt;/p&gt;
&lt;p&gt;Those of us that still have stable incomes can often find far more ingredients
than ever before.  In New York City there’s &lt;a href=&quot;https://chefcollectivenyc.com/&quot;&gt;Chef Collective&lt;/a&gt; seeing even better
stock because many restaurants have shuttered or are generally seeing fewer
customers.  Some restaurants, like &lt;a href=&quot;https://www.xianfoods.com/&quot;&gt;Xi’an Famous Foods&lt;/a&gt;, have even pivoted to
selling “kits” instead of doing delivery because their foods don’t work well
with delivery.&lt;/p&gt;
&lt;p&gt;The article points out a book - &lt;a href=&quot;https://www.amazon.com/How-Cook-Wolf-M-F-K-Fisher/dp/0865473366/&quot;&gt;How to Cook a Wolf by MFK Fisher&lt;/a&gt;.  The book
through dealing with shortages and difficulties that existed when cooking during
World War 2.  I am so grateful that my life is in a place where the feeling
of hunger is a choice rather than a fact of life.  I picked up a copy of the
book.  I’m really looking forward to reading it.&lt;/p&gt;
&lt;p&gt;In theory, I love to cook.  In practice, I’ve been cooking far too often to
truly enjoy it.  I have always had an extreme respect for my mother and father.
We cooked food at home every single day while I was growing up - sometimes
out of necessity.  We didn’t do fast food, and we very rarely ate at
restaurants or had takeout.  They followed through with that to make sure
there was food on the table &amp;#x26; dealt with getting children to eat that food.&lt;/p&gt;
&lt;p&gt;I really do love cooking - just.. in theory.  In practice, I can’t wait to
make it an exciting optional activity like this cooking class I’m taking.
I’ve registered to the wait list for the vaccine and boy am I looking forward
to that.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[New Team Kick Start]]></title><description><![CDATA[Joining a new team can be difficult.  You lack institutional knowledge and the
lingua franca that the rest of the team has - it’s like they’re speaking a language
you know at face value but the context tying it together is missing.]]></description><link>https://notjam.es/new-team-kick-start</link><guid isPermaLink="false">https://notjam.es/new-team-kick-start</guid><pubDate>Wed, 06 Nov 2019 05:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Joining a new team can be difficult.  You lack institutional knowledge and the
lingua franca that the rest of the team has - it’s like they’re speaking a language
you know at face value but the context tying it together is missing.&lt;/p&gt;
&lt;!-- end-excerpt --&gt;
&lt;blockquote&gt;
&lt;p&gt;“Seek first to understand, then to be understood.” - Habit 5: The 7 Habits of
highly Effective People&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we join a new team we want to have an impact right away.  Even with good
intent this can be disastrous without the right context.  There’s an approach
to this problem I found on &lt;a href=&quot;https://web.archive.org/web/20190314125923/http://boz.com/articles/career-cold-start.html&quot;&gt;Andrew Bosworth’s site&lt;/a&gt;.  It
helps you quickly gather context and build a framework to base the knowledge
around.&lt;/p&gt;
&lt;p&gt;This approach starts with an agenda.&lt;/p&gt;
&lt;h2 id=&quot;the-agenda&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-agenda&quot; aria-label=&quot;the agenda permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Agenda&lt;/h2&gt;
&lt;p&gt;25 minutes total.  3 questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;20 minutes: “Tell me everything you think I should know.”&lt;/li&gt;
&lt;li&gt;3 minutes: “What are the biggest challenges the team has right now?”&lt;/li&gt;
&lt;li&gt;2 minutes: “Who else should I speak with?”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bring a notebook, write everything down, only interrupt if you need
clarification,and repeat this process for every name you get.  If you don’t
know where to start, go to your manager.&lt;/p&gt;
&lt;h2 id=&quot;tell-me-everything-you-think-i-should-know&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tell-me-everything-you-think-i-should-know&quot; aria-label=&quot;tell me everything you think i should know permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tell me everything you think I should know.&lt;/h2&gt;
&lt;p&gt;This is intentionally vague.  The responses you get vary from person to person.
Just roll with it.  Keep taking notes, and only interrupt for clarification -
such as a term you don’t understand.&lt;/p&gt;
&lt;p&gt;Architecture of the build system?  Ranting about their manager?  Favorite
restaurant in town?  All of this is great.  Why?  Because you’re learning
something new.&lt;/p&gt;
&lt;p&gt;Many people expect the universe to be efficient and orderly.  It isn’t.
Always assume everyone has something to teach you - even when talking about
topics that appear to bring no substantive value to the conversation or the
business needs.  People and organizations are messy so you’ll never know when
something is relevant.&lt;/p&gt;
&lt;p&gt;You won’t learn everything you’ll need to know with your new team.  Not by a long
shot.  Don’t fret - it’s OK.  There’s not nearly enough time for that in these
meetings.  Learning in depth will take you much, much longer.  &lt;/p&gt;
&lt;p&gt;Instead, this exercise helps you build rapport and context.  Sometimes you’ll
find the location of important documentation.  Other times you’ll gather
important tribal knowledge that’s not documented anywhere.  Then again, maybe
you’ll get a bit of a history lesson.&lt;/p&gt;
&lt;p&gt;Through this you can learn the common language of the team.  You’ll start by
building out a framework to understand where your context has gaps.  This is
where all the clarification comes in.  You gain knowledge that fills in those
gaps so you can hop over the many barriers that prevent you from joining
discussions.&lt;/p&gt;
&lt;h2 id=&quot;what-are-the-biggest-challenges-the-team-has-right-now&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-are-the-biggest-challenges-the-team-has-right-now&quot; aria-label=&quot;what are the biggest challenges the team has right now permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What are the biggest challenges the team has right now?&lt;/h2&gt;
&lt;p&gt;Given the first question this could be redundant - folks will pretty frequently
answer it partially as what you need to know.  That’s not important, ask
it anyway.  This question ensures that there is a focused time to understand
the perceived challenges that the team faces.&lt;/p&gt;
&lt;p&gt;Internalize the bigger problems - the problems that will take a long time to
fix.  “We’re using an outdated tech stack” or “We aren’t focused on building
the primary product”.  Maybe they’re complex, maybe systemic, but they won’t
be mitigated right away.  If you’re in a  leadership role, identify how the
team could move toward these as long term goals.&lt;/p&gt;
&lt;p&gt;The smaller problems are often small enough that the team hasn’t prioritized
them.  They might be quality of life improvements, or solvable issues with
process.  Things like “We’re overwhelmed with meetings” or “We have a flakey
test in the build that’s been frustrating”.  These are good to dig into so you
get some quick wins while building your knowledge of the systems at play.&lt;/p&gt;
&lt;p&gt;Asynchronously follow up on these if you don’t understand them.  You don’t have
much time during the meeting, and once you know of its existence you should be
able to describe it in an email or slack message.&lt;/p&gt;
&lt;h2 id=&quot;who-else-should-i-speak-with&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#who-else-should-i-speak-with&quot; aria-label=&quot;who else should i speak with permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Who else should I speak with?&lt;/h2&gt;
&lt;p&gt;This question is incredibly important.  Sure, it helps you fan out into the
team.  At the same time, though, it builds a graph of influence via the
frequency of names.  Forget what they shared to you the first day.  This is
the true org chart to guide you through social interactions.&lt;/p&gt;
&lt;p&gt;Until you’ve run out of steam I would suggest following up with every name you
get.  I’d suggest at least talking with some of your peers and your team
you’ll be working with on a regular basis.  You don’t need to (or maybe can’t)
meet with everyone on the team.&lt;/p&gt;
&lt;h2 id=&quot;the-end-goal&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-end-goal&quot; aria-label=&quot;the end goal permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The End Goal&lt;/h2&gt;
&lt;p&gt;None of this is new or too surprising.  You’re building relationships within
your team.  The big value here is in the asking and listening.  It shows a
respect to the existing team and paves the path to a level of trust.&lt;/p&gt;
&lt;p&gt;You’ll end up with more questions than answers, finding you don’t know more
than you thought - but at least you’ll know what you didn’t know.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Writing JavaScript Behavioral Unit Tests]]></title><description><![CDATA[When going through some old projects I realized that I hadn’t particularly kept
up with my game of life implementation in JavaScript.
I…]]></description><link>https://notjam.es/writing-javascript-behavioral-unit-tests</link><guid isPermaLink="false">https://notjam.es/writing-javascript-behavioral-unit-tests</guid><pubDate>Sun, 28 Sep 2014 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When going through some old projects I realized that I hadn’t particularly kept
up with my &lt;a href=&quot;/gameoflife.js&quot;&gt;game of life&lt;/a&gt; implementation in JavaScript.
I never truly verified it worked.  Sure, it &lt;em&gt;looks&lt;/em&gt; like it worked
but how would I know for sure that it did?  Behavioral unit tests to the rescue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any live cell with fewer than two live neighbors dies, as if caused by under-population.&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbors lives on to the next generation.&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbors dies, as if by overcrowding.&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a good representation of the behavior that should be exhibited by
&lt;a href=&quot;http://wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt; in plain, understandable English.
However, we are engineers!  We have to come up with some overly abstract and
strict way to represent these behaviors.  We need a specification.&lt;/p&gt;
&lt;h2 id=&quot;behavioral-specifications&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#behavioral-specifications&quot; aria-label=&quot;behavioral specifications permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Behavioral Specifications&lt;/h2&gt;
&lt;p&gt;A behavioral specification is a document, not dissimilar from pseudo code, which
describes the expected behavior of a software unit.  While not entirely
necessary for writing tests these documents can flesh out what tests are needed
and reveal issues that may not be obvious otherwise.  As crazy as it may sound
it also creates a way for someone that is less technical to not only understand
what your tests do, but also verify that they match every behavior that is
expected of the system.&lt;/p&gt;
&lt;p&gt;While there is no right or wrong way to write a behavior specification, the
&lt;a href=&quot;http://dannorth.net/whats-in-a-story/&quot;&gt;structure proposed by Dan North&lt;/a&gt; is clear,
concise, and uniform.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-text line-numbers&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Story: Game of Life

As a cellular automaton simulation
I want to follow the rules of Conway&amp;#39;s Game of Life
So that we are able to simulate simple life

Scenario 1: Game of Life should kill lonely cells
Given that a cell is alive
 And that cell has no live neighbors
When a simulation step has executed
Then that cell should die

Scenario 2: Game of Life should kill cells with only one neighbor
Given that a cell is alive
 And that cell has exactly one live neighbor
When a simulation step has executed
Then that cell should die

Scenario 3: Game of Life should leave cells with two neighbors alone
Given that a cell is alive
 And that cell has two live neighbors
When a simulation step has executed
Then that cell should continue to live

Scenario 4: Game of Life should leave cells with three neighbors alone
Given that a cell is alive
 And that cell has three live neighbors
When a simulation step has executed
Then that cell should continue to live

Scenario 5: Game of Life should kill overpopulated cells
Given that a cell is alive
 And that cell has more than three live neighbors
When a simulation step has executed
Then that cell should die

Scenario 6: Game of Life should reproduce into cells with exactly three live neighbors
Given that a cell is dead
 And that cell has exactly three live neighbors
When a simulation step has executed
Then that cell should be given life&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;writing-the-tests&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#writing-the-tests&quot; aria-label=&quot;writing the tests permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing The Tests&lt;/h2&gt;
&lt;p&gt;Writing unit tests in Jasmine is dead simple.  The hard part is   Just a minor translation.  We start by creating the directory &lt;code class=&quot;language-text&quot;&gt;specs&lt;/code&gt;
and adding the file for our story in it, &lt;code class=&quot;language-text&quot;&gt;gameoflife.js&lt;/code&gt;.  We can start by
adding in a basic description of our story, as well as set up which will be used
by all of our tests.&lt;/p&gt;
&lt;p&gt;To create a group of specs which will be our story, Jasmine provides &lt;code class=&quot;language-text&quot;&gt;describe&lt;/code&gt;,
which accepts a description string and a callback.  Because the callback is
a normal JavaScript function we can define variables inside it which is exposed
to all of the specs.  The set up is achieved by using the &lt;code class=&quot;language-text&quot;&gt;beforeEach&lt;/code&gt; function
provided by Jasmine with the describe callback.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Game of Life&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// As a cellular automaton&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// I want to follow the rules of Conway&apos;s Game of Life&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// So that we are able to simulate simple life&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; game&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        game &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GameOfLife&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// No scenarios have been defined yet, but this is where they would go!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the most part the scenario test should be as basic as possible.  They have
already been defined in our Behavioral specification document, and can be
translated to our Jasmine tests.  The scenarios match up with specs using the
Jasmine provided function &lt;code class=&quot;language-text&quot;&gt;it&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To verify behavior expectations are key to the tests, and the &lt;code class=&quot;language-text&quot;&gt;expect&lt;/code&gt; function
can be used.  Expectations in jasmine take the actual value as a parameter and
use method chaining to create matches.  There are many
&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html#section-Included_Matchers&quot;&gt;matchers included by default&lt;/a&gt; in Jasmine, but those
used most often are &lt;code class=&quot;language-text&quot;&gt;toBe&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;toEqual&lt;/code&gt;.  While similar there is a definite
difference: &lt;code class=&quot;language-text&quot;&gt;toBe&lt;/code&gt; tests if an actual matches a given expected result with &lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt;
and &lt;code class=&quot;language-text&quot;&gt;toEqual&lt;/code&gt; tests if an actual matches a given expected result with &lt;code class=&quot;language-text&quot;&gt;==&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, scenario 1 and 2 could be represented with the following specs:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Scenario 1&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;should kill lonely cells&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Given that a cell is alive&lt;/span&gt;
    game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spawnCell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// And that cell has no live neighbors&lt;/span&gt;
    game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// When a simulation step has executed&lt;/span&gt;
    game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Then that cell should die&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInhabitants&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Scenario 2&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;should kill cells with only one neighbor&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Given that a cell is alive&lt;/span&gt;
    game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spawnCell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// And that cell has exactly one live neighbor&lt;/span&gt;
    game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spawnCell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// When a simulation step has executed&lt;/span&gt;
    game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Then that cell should die&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;game&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInhabitants&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the &lt;code class=&quot;language-text&quot;&gt;game&lt;/code&gt; variable has already been initiated in the &lt;code class=&quot;language-text&quot;&gt;beforeEach&lt;/code&gt;
function in the spec definition, so we can use it in our scenario.  We use
&lt;code class=&quot;language-text&quot;&gt;expect&lt;/code&gt; - passing in &lt;code class=&quot;language-text&quot;&gt;game.getInhabitants().length&lt;/code&gt; - and use Jasmine’s
&lt;a href=&quot;http://jasmine.github.io/2.0/introduction.html#section-Included_Matchers&quot;&gt;matching API&lt;/a&gt; to verify that it is equal to &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;.
While not absolutely necessary, they also include the original document as
comments, to explain what the test is trying to do in case the tests are ever
questioned.&lt;/p&gt;
&lt;p&gt;While this is a fraction of the scenarios, they all can be written in similar
fashion.  For the complete version of these specs written in Jasmine,
&lt;a href=&quot;https://github.com/imnotjames/gameoflife.js/blob/master/specs/gameoflife.js&quot;&gt;check them out on GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;npm-and-grunt-in-5-minutes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#npm-and-grunt-in-5-minutes&quot; aria-label=&quot;npm and grunt in 5 minutes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NPM and Grunt in 5 minutes&lt;/h2&gt;
&lt;p&gt;While using NPM and grunt are not needed for using Jasmine it does simplify the
experience.  It takes a small amount of work getting it up and running but
could be an article in itself.  However, in just a couple minutes you can go
from arduously initiating tests manually to having grunt fly through them.  It
also bypasses the need of having a web browser open to run the tests by using
&lt;a href=&quot;http://phantomjs.org/&quot;&gt;phantomJS&lt;/a&gt; - a definite win.  If you haven’t already you should
&lt;a href=&quot;http://nodejs.org/download/&quot;&gt;install node&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;If don’t have a &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; file you can generate one with
&lt;a href=&quot;https://www.npmjs.org/doc/cli/npm-init.html&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt;&lt;/a&gt;.  To add the &lt;code class=&quot;language-text&quot;&gt;grunt&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;grunt-contrib-jasmine&lt;/code&gt;
dependencies you can run the command
&lt;code class=&quot;language-text&quot;&gt;npm install grunt grunt-contrib-jasmine --save-dev&lt;/code&gt; or manually edit the
package file. If you need to know anything else about the &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;
file, you can always consult the
&lt;a href=&quot;https://www.npmjs.org/doc/files/package.json.html&quot;&gt;npm documentation on the subject&lt;/a&gt;.  Once you’re
satisfied with your &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; running &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt; should fetch Jasmine,
grunt, and the grunt Jasmine task if you haven’t installed them already.&lt;/p&gt;
&lt;p&gt;However, you still need a &lt;code class=&quot;language-text&quot;&gt;Gruntfile.js&lt;/code&gt; to run the tests.  The &lt;code class=&quot;language-text&quot;&gt;Gruntfile&lt;/code&gt;
initializes the various tasks including our test runner.  The following is an
example &lt;code class=&quot;language-text&quot;&gt;Gruntfile&lt;/code&gt; which assumes your Jasmine specs are in &lt;code class=&quot;language-text&quot;&gt;/specs/&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    grunt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        jasmine &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            src &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;src/**/*.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            options &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                specs &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;specs/**/*.js&apos;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    grunt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;jasmine&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    grunt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;grunt-contrib-jasmine&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a very basic example which only runs the Jasmine tests.  Grunt can do a
wide variety of tasks.  More information on setting up tasks in a
&lt;code class=&quot;language-text&quot;&gt;Gruntfile&lt;/code&gt; can be found in the &lt;a href=&quot;http://gruntjs.com/getting-started&quot;&gt;Grunt Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;integrating-with-travis-ci&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#integrating-with-travis-ci&quot; aria-label=&quot;integrating with travis ci permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Integrating with Travis CI&lt;/h2&gt;
&lt;p&gt;Continuous integration is an important part of keeping up to date with the
status of your software build.  Not only does it never forget to run your unit
tests, it runs them on many different environments at the same time.
Travis CI has an in &lt;a href=&quot;http://docs.travis-ci.com/user/languages/javascript-with-nodejs/&quot;&gt;in-depth reference&lt;/a&gt;  on their
integration with node.js for a multitude of complex set ups. For anyone else
who just wants to get the Jasmine tests up and running with Travis CI, it’s one
of the more basic things to do.&lt;/p&gt;
&lt;p&gt;By default Travis calls &lt;code class=&quot;language-text&quot;&gt;npm test&lt;/code&gt;, which refers to a predefined script. Add to
the &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; a &lt;code class=&quot;language-text&quot;&gt;scripts&lt;/code&gt; section and within that scripts section you must
define how you want your tests to be run.  Because grunt was configured with a
task called test in the &lt;code class=&quot;language-text&quot;&gt;Gruntfile&lt;/code&gt; above, adding &lt;code class=&quot;language-text&quot;&gt;grunt test&lt;/code&gt; should be
sufficient.  For extra measure, and to aid in resolving any failures it is
a good rule of thumb to enable as much verbosity as possible.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-json line-numbers&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;grunt test --verbose&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, changes to the package definition alone won’t get a project ready to
be ran.  To tell Travis what language this is and how the environment must be
set up a &lt;code class=&quot;language-text&quot;&gt;.travis.yml&lt;/code&gt; file is required.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-yaml line-numbers&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node_js
&lt;span class=&quot;token key atrule&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.11&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.10&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.8&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm update -g npm&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm install -g grunt-cli&quot;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The amount of customization that can be done with the configuration file can be
a little overwhelming, but most everything that anyone could ever want to know
about Travis is in their  &lt;a href=&quot;http://docs.travis-ci.com/&quot;&gt;documentation&lt;/a&gt;.  However, with those two
changes in place all it takes is a commit, a push, and you can sign into Travis
and get it to start running continuous integration like all of those fancy
pants engineers.&lt;/p&gt;
&lt;h2 id=&quot;the-point-of-it-all&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-point-of-it-all&quot; aria-label=&quot;the point of it all permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Point of it All&lt;/h2&gt;
&lt;p&gt;At the end of the day software that is written is worthless if it doesn’t behave
as it’s supposed to.  Even if broken software is better than no software, part
of being a professional is holding yourself to a higher standard than
“adequate”.  With everything set up not only can you verify after every change
that you’ve not broken the behavior of your systems, you also get feedback on
all commits automatically through Travis or other Continuous Integration
systems.  Nobody is always perfect, so testing is a valuable safety net for
when humanity hits and mistakes are made.&lt;/p&gt;
&lt;p&gt;Most of all, breaking the build should be lauded as a learning experience, not
shunned as a failure.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[print_r is terrible]]></title><description><![CDATA[The short version: use , don’t use .  is to print human readable representations of a variable’s contents.
It is practically useless as a…]]></description><link>https://notjam.es/print_r-is-terrible</link><guid isPermaLink="false">https://notjam.es/print_r-is-terrible</guid><pubDate>Mon, 28 Jul 2014 16:22:11 GMT</pubDate><content:encoded>&lt;p&gt;The short version: use &lt;code class=&quot;language-text&quot;&gt;var_dump&lt;/code&gt;, don’t use &lt;code class=&quot;language-text&quot;&gt;print_r&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;print_r&lt;/code&gt; is to print human readable representations of a variable’s contents.
It is practically useless as a debugging tool.  It isn’t even useful for
humans to consume it because no human wants to read arrays or even think about
the concept of arrays.&lt;/p&gt;
&lt;p&gt;On first glance it kind of works.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;foo bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
foo bar

php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those sure are some fantastic string representations of things.&lt;/p&gt;
&lt;p&gt;But you quickly find out that many things are printed as being the same value.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When strings are involved, you also can get output that may look the same but
isn’t because of whitespace or other various non-visible characters.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;foo &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; foo 
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; foo
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; foo
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;..Or you get things caused by people who just want to watch the world burn.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;Array\n\t\t(\n\t\t\t[0] =&gt; Wello\n\n\t\t)\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Wello

                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;print_r&lt;/code&gt; does not display data in any structured manner and sacrifices
differentiating between types for the sake of readability.  While you are
debugging you don’t want readability.  You want to know what the variable
contains.  &lt;code class=&quot;language-text&quot;&gt;var_dump&lt;/code&gt; gets you that.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;foo &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword type-declaration&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;foo &quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword type-declaration&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword type-declaration&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;foo\000&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

php &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword type-declaration&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword type-declaration&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just use &lt;a href=&quot;http://php.net/var_dump&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var_dump&lt;/code&gt;&lt;/a&gt;.  (Or be sane and set up &lt;a href=&quot;http://xdebug.org/&quot;&gt;xdebug&lt;/a&gt;.)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Problems with Long Running PHP scripts]]></title><description><![CDATA[Writing a daemon in PHP can be a very attractive prospect.  You already have
your website written, so you have all of this great code…]]></description><link>https://notjam.es/the-problems-with-long-running-php</link><guid isPermaLink="false">https://notjam.es/the-problems-with-long-running-php</guid><pubDate>Thu, 19 Jun 2014 00:51:11 GMT</pubDate><content:encoded>&lt;p&gt;Writing a daemon in PHP can be a very attractive prospect.  You already have
your website written, so you have all of this great code already.  You just need
it to run and keep track of some data or handle some data as it comes in by
polling a database.  All you do is.. make some infinite loop and..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$databse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name static-context&quot;&gt;MyGreatLibrary&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$database&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchNewData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token class-name static-context&quot;&gt;MyGreatProcessor&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token function&quot;&gt;error_log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;Error with processor: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTraceAsString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Wait for new data&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oh yes.  Beautiful, we’re in business!  What could possibly go wrong?&lt;/p&gt;
&lt;h2 id=&quot;php-isnt-meant-to-live-forever&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#php-isnt-meant-to-live-forever&quot; aria-label=&quot;php isnt meant to live forever permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PHP isn’t meant to live forever&lt;/h2&gt;
&lt;p&gt;The biggest reason to let PHP die is that it is the intended use.  It’s a
system primarily designed to handle one request, die, and jump back up again,
resetting itself to a pristine condition - like some sort of ElePHPhoenix.&lt;/p&gt;
&lt;p&gt;When you take that glorious death of the process away from it you’re fighting
what makes PHP so useful for the web - how it throws everything away after
each request.  When you try to work around this, and force PHP into roles
that it’s not fit for you’ve subjugated yourself to be tormented.&lt;/p&gt;
&lt;p&gt;You also will be bypassing most knowledge that sane developers have
accumulated, and the standard PHP documentation will not be able to save you.
It’s lacking and even non-existant in many cases.&lt;/p&gt;
&lt;h2 id=&quot;memory-leaks-and-garbage-collection-problems&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#memory-leaks-and-garbage-collection-problems&quot; aria-label=&quot;memory leaks and garbage collection problems permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Memory Leaks and Garbage Collection Problems&lt;/h2&gt;
&lt;p&gt;The largest problem with long running scripts has much to do with PHP’s
&lt;a href=&quot;http://www.php.net/manual/en/features.gc.php&quot;&gt;garbage collection&lt;/a&gt;.  In recent versions it’s become a more advanced
system (version 5.3 and later) but it still can have quirks which may not be at
first the most obvious, especially to those who are used to managing memory on
their own.&lt;/p&gt;
&lt;p&gt;This is something exacerbated because PHP itself never frees up memory back to
the operating system to dole out to other processes.  It will only allow it to
be reallocated by other PHP data.  This means that once it does allocate memory
to a PHP process, it continues to hold onto it until the process is ended.&lt;/p&gt;
&lt;p&gt;In many cases unset can be invoked and the garbage collection routines will
eventually get to them.  This is done by the internal implementation of
data structures in PHP keeping a &lt;a href=&quot;http://php.net/gc.refcounting-basics&quot;&gt;reference counter&lt;/a&gt;,
incremented at every occurrence of use of the reference, and decremented when
unset.  There are a few cases in which unset does not fully decrement the
reference counter.  One of which is if there is, surprise, a reference to the
data in some other area.  This could be if another object or variable points
to it, which at first thought may be straightforward may not always be easy to
detect.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse_data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token variable&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;parsed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token variable&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;original&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$variable&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;stdClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$variable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file_get_contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;large_file.txt&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;parse_data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$variable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$variable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// The references still exist to the zval that $variable pointed at&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The other, more devious instance of data remaining in memory is cyclical
references, in that one object refers to another object which refers back to
the original object.  Even when you unset both of the references to the
objects, they still have a reference in that they refer to each other.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$super&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SuperGreat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$super&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;selfReference&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// $super&apos;s data continues to stay in memory unless&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// the garbage collector is enabled&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be resolved by enabling the more advanced garbage collection available
in PHP 5.3 and later.  This can be done either with the function &lt;code class=&quot;language-text&quot;&gt;gc_enable()&lt;/code&gt;
or the php.ini setting &lt;code class=&quot;language-text&quot;&gt;zend.gc_enable=1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even then, you’re still at the whim of the garbage collector, which will only
collect the unused references when the root buffer fills up.  Thus, calling
&lt;code class=&quot;language-text&quot;&gt;gc_collect_cycles()&lt;/code&gt; may be required in situations where memory is at a
premium.&lt;/p&gt;
&lt;p&gt;These issues with memory leaks do not always pertain to just your code,
either.  Many third party PHP libraries can be at fault as well.  If they don’t
follow the same strict rules regarding reference counting and hinting to the
garbage collector that data is available to be collected memory leaks can occur.
This does not get into extensions, which are often never meant to be running for
long periods of time and do have the ability to mismanage memory.  A good
example of this is PHP’s SPL library.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayObject&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$iterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getIterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;// Well, this is a heavy object to make, let&apos;s memoize it&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayIterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$collection&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;bar&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$collection&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$collection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;gc_collect_cycles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Memory from collection is never freed&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There was a &lt;a href=&quot;https://bugs.php.net/bug.php?id=53803&quot;&gt;bug opened&lt;/a&gt;, but no resolution aside from manually
destroying the cycles has come of it.  The reason that it happens is because,
as described in the bug, the garbage collector relies on
&lt;a href=&quot;https://wiki.php.net/internals/engine/objects#get_properties&quot;&gt;get_properties’&lt;/a&gt; &lt;code class=&quot;language-text&quot;&gt;HashTable&lt;/code&gt; to know which references
are held by a given object.&lt;/p&gt;
&lt;p&gt;In a traditional request PHP cleans up all variables during shut down of the
engine in preparation for the next request.  As a long running script
intends to never shut down and allow that process to happen memory leaks
escalate from being a minor blip to taking down entire servers.&lt;/p&gt;
&lt;h2 id=&quot;resource-descriptor-limit&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#resource-descriptor-limit&quot; aria-label=&quot;resource descriptor limit permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resource Descriptor limit&lt;/h2&gt;
&lt;p&gt;When opening a file, a connection to a database using some APIs, or working with
various extensions, you get back a resource instead of an object.  These
resources allow PHP to correctly communicate with the open stream you’ve
instantiated.&lt;/p&gt;
&lt;p&gt;Resource Descriptors, however are not a renewable resource in PHP as of the 5.5
release.  The counter is limited to 2^32 - 1.  What should happen is that
the open stream &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html&quot;&gt;should&lt;/a&gt; choose the lowest file descriptor not
currently open.  PHP, however, does not.  Once a resource is opened it can’t
be reused.  Closing it does not send it back to the available pool of
descriptors.  The &lt;a href=&quot;https://bugs.php.net/bug.php?id=47396&quot;&gt;related bug&lt;/a&gt; has been open for nearly 4 years now,
so while it is possible that it’s being worked on, it is even more possible
that it will not be fixed for some time.&lt;/p&gt;
&lt;p&gt;However, seeing as there are then roughly 8.6 billion available
descriptors this is unlikely to be much of an issue in most real world
situations.  Just one of the many little problems that exist with running a
PHP script for a long period of time.&lt;/p&gt;
&lt;h2 id=&quot;other-minor-concerns&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#other-minor-concerns&quot; aria-label=&quot;other minor concerns permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other minor concerns&lt;/h2&gt;
&lt;p&gt;With long running scripts one of the more lucrative features of PHP doesn’t
come into play, either - how it handles updates.  If PHP never shuts down
the code is never unloaded, and new code is never loaded back in.  This means
that a user would have to manually shut down the worker in some way, usually by
killing the process.  One way to work around this would be to keep track of
when the script was started and compare it against the modified time of the
file, then exiting when it is safe to do so.  Not a pretty way to handle
updates by far.&lt;/p&gt;
&lt;p&gt;Many libraries rely on open connections to external services, and for a large
range of reasons that connection could be closed after a long enough time,
especially if the script is sitting in a “waiting” state for a while.
An example of such behavior could be the error message
&lt;code class=&quot;language-text&quot;&gt;MySQL server has gone away&lt;/code&gt;.  This requires boilerplate code to be in place,
verifying that the connection is fresh and available when processing data.&lt;/p&gt;
&lt;h2 id=&quot;what-can-i-do-about-it&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-can-i-do-about-it&quot; aria-label=&quot;what can i do about it permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What can I do about it?&lt;/h2&gt;
&lt;p&gt;In most cases the need for a long running script just isn’t there.  For some
people, PHP isn’t needed at all, and a language better suited for writing
daemons could be chosen.&lt;/p&gt;
&lt;p&gt;There also are many techniques for handling the processing of data in the
background without using long running PHP scripts.  One such would be the use
of job queues and short lived PHP workers started by &lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisord&lt;/a&gt;,
such as &lt;a href=&quot;http://kr.github.io/beanstalkd/&quot;&gt;Beanstalkd&lt;/a&gt;, &lt;a href=&quot;http://gearman.org/&quot;&gt;Gearman&lt;/a&gt;, or &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt;.  Many
job queues allow configuration to limit the number of jobs workers will handle
before restarting, thus negating the problems that can crop up.&lt;/p&gt;
&lt;p&gt;It’s possible to write long lived PHP daemons.  That doesn’t mean it’s the best
use of anyone’s time, especially yours.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[RFC: Engine Exception; Erroneous Exceptional Errors]]></title><description><![CDATA[One of the flaws with PHP is the ways in which it handles engine errors.  However, might change in PHP 5.6. Most of the errors in PHP will…]]></description><link>https://notjam.es/rfc-engine-exceptions</link><guid isPermaLink="false">https://notjam.es/rfc-engine-exceptions</guid><pubDate>Wed, 06 Nov 2013 05:21:11 GMT</pubDate><content:encoded>&lt;p&gt;One of the flaws with PHP is the ways in which it handles engine errors.  However, might change in PHP 5.6.&lt;/p&gt;
&lt;p&gt;Most of the errors in PHP will emit a small amount of text, call the error handler, and allow the engine to continue.
However, there are a few errors which are emitted that do not call the error handler, and instead terminate the application.
Specifically, these are &lt;code class=&quot;language-text&quot;&gt;E_ERROR&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;E_CORE_ERROR&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;E_COMPILE_ERROR&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;E_PARSE&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;E_USER_ERROR&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;E_RECOVERABLE_ERROR&lt;/code&gt;.  Of these,
only &lt;code class=&quot;language-text&quot;&gt;E_RECOVERABLE_ERROR&lt;/code&gt; calls the error handler, but it still will abort the running script if not handled correctly.&lt;/p&gt;
&lt;p&gt;Some of these errors are from seemingly innocuous conditions, such as calling methods on null values, creating incorrect SimpleXML, or
trying to load an invalid WSDL in SoapClient.  (If you’re using the SoapClient, though, you have other problems.)  Not only can one
of the error conditions end a running script without allowing any cleanup, it also breaks several assumptions programmers can have.
For example, the &lt;code class=&quot;language-text&quot;&gt;finally&lt;/code&gt; construct and &lt;code class=&quot;language-text&quot;&gt;__deconstruct&lt;/code&gt; methods are always ran before PHP shuts down - unless of course a fatal error ends
it early.  There are some hacks to handle these behaviors slightly better using &lt;code class=&quot;language-text&quot;&gt;register_shutdown_function&lt;/code&gt;, but they are just that.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token function&quot;&gt;set_error_handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$errno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$errstr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$errfile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$errline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;E_RECOVERABLE_ERROR&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$errno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$datetime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$datetime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$datetime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// A timestamp instead of a datetime object.&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1383329451&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// int(1383329451) - we&apos;ve bypassed the hinting&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Catching a recoverable fatal error may be even worse than handling an &lt;code class=&quot;language-text&quot;&gt;E_ERROR&lt;/code&gt;.  The code continues on once it is caught as if nothing happened.
Situations like type hinting errors caught will allow input of the wrong type to be allowed through.  Even if you set an empty error handler that
does not return anything, &lt;code class=&quot;language-text&quot;&gt;E_RECOVERABLE_ERROR&lt;/code&gt; will be silently ignored and PHP will blunder onward.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EngineException&lt;/code&gt; is the proposed solution to this problem, by Nikita Popov.  It is a move away from the errors of the past, towards catch-able
Exceptions where possible.  The RFC includes &lt;code class=&quot;language-text&quot;&gt;E_ERROR&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;E_RECOVERABLE_ERROR&lt;/code&gt; in the purge, though the attached patch as of this writing
mostly only delves into a small portion of the errors, but it does include wording for developers to avoid using fatal errors, and instead
use exceptions where possible.  The following code would now work, where as of PHP 5.5, it does not.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-php line-numbers&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$h&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;lockfile&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;r+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LOCK_EX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token variable&quot;&gt;$object&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token function&quot;&gt;flock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LOCK_UN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a win for anyone who has written any long living PHP application, as well as for those who don’t want to rely on error handlers to
make an attempt to hastily exit from what should not be a catastrophic engine shutdown.&lt;/p&gt;
&lt;p&gt;While backwards compatibility woes threaten to halt this RFC faster than any &lt;code class=&quot;language-text&quot;&gt;E_FATAL_ERROR&lt;/code&gt;, it hopefully will push future development to not use fatal errors.&lt;/p&gt;</content:encoded></item></channel></rss>