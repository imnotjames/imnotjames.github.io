{"componentChunkName":"component---src-templates-on-my-mind-thought-js","path":"/on-my-mind/2021-03-03","result":{"data":{"site":{"siteMetadata":{"title":"DEFINITIVELY NOT JAMES","author":"James Ward"}},"thought":{"id":"83d6c859-32db-509b-8fd3-0044f4b70e70","html":"<p><img src=\"https://media.giphy.com/media/3ov9jNziFTMfzSumAw/giphy.gif\"></p>\n<p>The “far right” social media platform, Gab, was\n<a href=\"https://arstechnica.com/information-technology/2021/03/gab-the-far-right-website-has-been-hacked-and-70gb-of-data-leaked/\">breached sometime last month</a> and had public messages, private messages\nand password hashes leaked on March 1st.  </p>\n<p>Let’s ignore the… uh… unprofessional (to put it lightly) statement the\nfounder made and how they responded to this event in general.  It’s not worth\nunpacking all of that.  It really isn’t.  I promise you.</p>\n<p>Instead, let’s chat about how this happened.  It’s pretty simple.</p>\n<p>The site in question had <a href=\"https://archive.vn/oxbck\">a commit</a> from the Gab CTO which migrated a\nspecific SQL query away from the library abstraction SQL and into raw SQL -\nthe query language used to interact more directly with their database.\nThis is often done because a custom SQL query can often be used to greatly\nimprove performance.</p>\n<p>However…</p>\n<p>As part of this, they used string interpolation do craft the query.  String\ninterpolation is kinda like saying <code class=\"language-text\">VARIABLE_U</code> is <code class=\"language-text\">james</code> and I want to\ninterpolate that into <code class=\"language-text\">SELECT * FROM user WHERE username = &#39;$VARIABLE_U&#39;</code> so\nthat I end up with the final string of <code class=\"language-text\">SELECT * FROM WHERE username = &#39;james&#39;</code>.</p>\n<p>Simple, right?</p>\n<p>This way of crafting SQL can fail because of what is known as\n<a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">SQL Injection</a>. In our example, what if <code class=\"language-text\">VARIABLE_U</code> was coming from an\ninput field on a website?  In that case, a user could type whatever they wanted\ninto that field.</p>\n<p>If a user was to type in <code class=\"language-text\">&#39; OR &#39;a&#39; = &#39;a</code>, the final string would then look\nsomething like <code class=\"language-text\">SELECT * FROM user WHERE username = &#39;&#39; OR &#39;a&#39; = &#39;a&#39;</code>.\nInstead of limiting to a single <code class=\"language-text\">username</code> value, we’d instead retrieve any\nusers.</p>\n<p>This can be elaborated on to do even more - such as with\n<a href=\"https://owasp.org/www-community/attacks/Blind_SQL_Injection\">Blind SQL Injection</a> techniques.</p>\n<p>How should they instead of handled this?  By using the library to “bind”\nparameters.  <a href=\"https://api.rubyonrails.org/classes/ActiveRecord/Querying.html#method-i-find_by_sql\">Ruby on Rails</a> supports this in the function used by the\nchange that caused the breach.</p>\n<p>In our example, we could instead write the query as\n<code class=\"language-text\">SELECT * FROM user WHERE username = ?</code> and then tell the library to bind\n<code class=\"language-text\">VARIABLE_U</code> to the first numbered parameter.  No string interpolation would\nbe performed, and with most databases the query would be sent over completely\nseparate from the bound parameters!</p>\n<p>This should have been caught in code review.  I mean.. if they do code\nreview, right?</p>","excerpt":"The “far right” social media platform, Gab, was\nbreached sometime last month and had public messages, private messages\nand password hashes…","fields":{"slug":"/2021-03-03"},"frontmatter":{"date":"2021/03/03"}},"previous":{"id":"56a40af7-9314-50e4-b68d-d8bdec6f137c","fields":{"slug":"/2021-03-02"},"frontmatter":{"date":"2021/03/02"}},"next":null},"pageContext":{"slug":"/2021-03-03","previous":"/2021-03-02","next":null}},"staticQueryHashes":["63159454"]}