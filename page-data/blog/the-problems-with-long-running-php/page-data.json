{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/the-problems-with-long-running-php","result":{"data":{"site":{"siteMetadata":{"title":"DEFINITIVELY NOT JAMES","author":"James Ward"}},"post":{"id":"4f1de9b2-929e-5ecb-829a-2714c6fd85eb","excerpt":"Writing a daemon in PHP can be a very attractive prospect.  You already have\nyour website written, so you have all of this great code already.  You just need\nit…","html":"<p>Writing a daemon in PHP can be a very attractive prospect.  You already have\nyour website written, so you have all of this great code already.  You just need\nit to run and keep track of some data or handle some data as it comes in by\npolling a database.  All you do is.. make some infinite loop and..</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$databse</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">MyGreatLibrary</span><span class=\"token operator\">::</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$database</span><span class=\"token operator\">-></span><span class=\"token function\">fetchNewData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name static-context\">MyGreatProcessor</span><span class=\"token operator\">::</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token variable\">$data</span><span class=\"token operator\">-></span><span class=\"token function\">ack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token variable\">$data</span><span class=\"token operator\">-></span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">error_log</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Error with processor: \"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-></span><span class=\"token function\">getTraceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait for new data</span>\n<span class=\"token punctuation\">}</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Oh yes.  Beautiful, we’re in business!  What could possibly go wrong?</p>\n<h2 id=\"php-isnt-meant-to-live-forever\" style=\"position:relative;\"><a href=\"#php-isnt-meant-to-live-forever\" aria-label=\"php isnt meant to live forever permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHP isn’t meant to live forever</h2>\n<p>The biggest reason to let PHP die is that it is the intended use.  It’s a\nsystem primarily designed to handle one request, die, and jump back up again,\nresetting itself to a pristine condition - like some sort of ElePHPhoenix.</p>\n<p>When you take that glorious death of the process away from it you’re fighting\nwhat makes PHP so useful for the web - how it throws everything away after\neach request.  When you try to work around this, and force PHP into roles\nthat it’s not fit for you’ve subjugated yourself to be tormented.</p>\n<p>You also will be bypassing most knowledge that sane developers have\naccumulated, and the standard PHP documentation will not be able to save you.\nIt’s lacking and even non-existant in many cases.</p>\n<h2 id=\"memory-leaks-and-garbage-collection-problems\" style=\"position:relative;\"><a href=\"#memory-leaks-and-garbage-collection-problems\" aria-label=\"memory leaks and garbage collection problems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memory Leaks and Garbage Collection Problems</h2>\n<p>The largest problem with long running scripts has much to do with PHP’s\n<a href=\"http://www.php.net/manual/en/features.gc.php\">garbage collection</a>.  In recent versions it’s become a more advanced\nsystem (version 5.3 and later) but it still can have quirks which may not be at\nfirst the most obvious, especially to those who are used to managing memory on\ntheir own.</p>\n<p>This is something exacerbated because PHP itself never frees up memory back to\nthe operating system to dole out to other processes.  It will only allow it to\nbe reallocated by other PHP data.  This means that once it does allocate memory\nto a PHP process, it continues to hold onto it until the process is ended.</p>\n<p>In many cases unset can be invoked and the garbage collection routines will\neventually get to them.  This is done by the internal implementation of\ndata structures in PHP keeping a <a href=\"http://php.net/gc.refcounting-basics\">reference counter</a>,\nincremented at every occurrence of use of the reference, and decremented when\nunset.  There are a few cases in which unset does not fully decrement the\nreference counter.  One of which is if there is, surprise, a reference to the\ndata in some other area.  This could be if another object or variable points\nto it, which at first thought may be straightforward may not always be easy to\ndetect.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">parse_data</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$output</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$output</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'parsed'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token operator\">-></span><span class=\"token property\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$output</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'original'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$variable</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">stdClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$variable</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'large_file.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">parse_data</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$variable</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$variable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The references still exist to the zval that $variable pointed at</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The other, more devious instance of data remaining in memory is cyclical\nreferences, in that one object refers to another object which refers back to\nthe original object.  Even when you unset both of the references to the\nobjects, they still have a reference in that they refer to each other.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$super</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperGreat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$super</span><span class=\"token operator\">-></span><span class=\"token property\">selfReference</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$super</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$super</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// $super's data continues to stay in memory unless</span>\n<span class=\"token comment\">// the garbage collector is enabled</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This can be resolved by enabling the more advanced garbage collection available\nin PHP 5.3 and later.  This can be done either with the function <code class=\"language-text\">gc_enable()</code>\nor the php.ini setting <code class=\"language-text\">zend.gc_enable=1</code>.</p>\n<p>Even then, you’re still at the whim of the garbage collector, which will only\ncollect the unused references when the root buffer fills up.  Thus, calling\n<code class=\"language-text\">gc_collect_cycles()</code> may be required in situations where memory is at a\npremium.</p>\n<p>These issues with memory leaks do not always pertain to just your code,\neither.  Many third party PHP libraries can be at fault as well.  If they don’t\nfollow the same strict rules regarding reference counting and hinting to the\ngarbage collector that data is available to be collected memory leaks can occur.\nThis does not get into extensions, which are often never meant to be running for\nlong periods of time and do have the ability to mismanage memory.  A good\nexample of this is PHP’s SPL library.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Collection</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ArrayObject</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token variable\">$iterator</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Well, this is a heavy object to make, let's memoize it</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">iterator</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">iterator</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayIterator</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">iterator</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token string single-quoted-string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'bar'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">gc_collect_cycles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Memory from collection is never freed</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There was a <a href=\"https://bugs.php.net/bug.php?id=53803\">bug opened</a>, but no resolution aside from manually\ndestroying the cycles has come of it.  The reason that it happens is because,\nas described in the bug, the garbage collector relies on\n<a href=\"https://wiki.php.net/internals/engine/objects#get_properties\">get_properties’</a> <code class=\"language-text\">HashTable</code> to know which references\nare held by a given object.</p>\n<p>In a traditional request PHP cleans up all variables during shut down of the\nengine in preparation for the next request.  As a long running script\nintends to never shut down and allow that process to happen memory leaks\nescalate from being a minor blip to taking down entire servers.</p>\n<h2 id=\"resource-descriptor-limit\" style=\"position:relative;\"><a href=\"#resource-descriptor-limit\" aria-label=\"resource descriptor limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resource Descriptor limit</h2>\n<p>When opening a file, a connection to a database using some APIs, or working with\nvarious extensions, you get back a resource instead of an object.  These\nresources allow PHP to correctly communicate with the open stream you’ve\ninstantiated.</p>\n<p>Resource Descriptors, however are not a renewable resource in PHP as of the 5.5\nrelease.  The counter is limited to 2^32 - 1.  What should happen is that\nthe open stream <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html\">should</a> choose the lowest file descriptor not\ncurrently open.  PHP, however, does not.  Once a resource is opened it can’t\nbe reused.  Closing it does not send it back to the available pool of\ndescriptors.  The <a href=\"https://bugs.php.net/bug.php?id=47396\">related bug</a> has been open for nearly 4 years now,\nso while it is possible that it’s being worked on, it is even more possible\nthat it will not be fixed for some time.</p>\n<p>However, seeing as there are then roughly 8.6 billion available\ndescriptors this is unlikely to be much of an issue in most real world\nsituations.  Just one of the many little problems that exist with running a\nPHP script for a long period of time.</p>\n<h2 id=\"other-minor-concerns\" style=\"position:relative;\"><a href=\"#other-minor-concerns\" aria-label=\"other minor concerns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other minor concerns</h2>\n<p>With long running scripts one of the more lucrative features of PHP doesn’t\ncome into play, either - how it handles updates.  If PHP never shuts down\nthe code is never unloaded, and new code is never loaded back in.  This means\nthat a user would have to manually shut down the worker in some way, usually by\nkilling the process.  One way to work around this would be to keep track of\nwhen the script was started and compare it against the modified time of the\nfile, then exiting when it is safe to do so.  Not a pretty way to handle\nupdates by far.</p>\n<p>Many libraries rely on open connections to external services, and for a large\nrange of reasons that connection could be closed after a long enough time,\nespecially if the script is sitting in a “waiting” state for a while.\nAn example of such behavior could be the error message\n<code class=\"language-text\">MySQL server has gone away</code>.  This requires boilerplate code to be in place,\nverifying that the connection is fresh and available when processing data.</p>\n<h2 id=\"what-can-i-do-about-it\" style=\"position:relative;\"><a href=\"#what-can-i-do-about-it\" aria-label=\"what can i do about it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What can I do about it?</h2>\n<p>In most cases the need for a long running script just isn’t there.  For some\npeople, PHP isn’t needed at all, and a language better suited for writing\ndaemons could be chosen.</p>\n<p>There also are many techniques for handling the processing of data in the\nbackground without using long running PHP scripts.  One such would be the use\nof job queues and short lived PHP workers started by <a href=\"http://supervisord.org/\">Supervisord</a>,\nsuch as <a href=\"http://kr.github.io/beanstalkd/\">Beanstalkd</a>, <a href=\"http://gearman.org/\">Gearman</a>, or <a href=\"http://www.celeryproject.org/\">Celery</a>.  Many\njob queues allow configuration to limit the number of jobs workers will handle\nbefore restarting, thus negating the problems that can crop up.</p>\n<p>It’s possible to write long lived PHP daemons.  That doesn’t mean it’s the best\nuse of anyone’s time, especially yours.</p>","fields":{"slug":"/the-problems-with-long-running-php"},"frontmatter":{"title":"The Problems with Long Running PHP scripts","date":"2014/06/19","time":"00:51 UTC"}},"previous":{"id":"026ef526-e96f-5d8b-8590-53a7558b9bcc","fields":{"slug":"/rfc-engine-exceptions"},"frontmatter":{"title":"RFC: Engine Exception; Erroneous Exceptional Errors"}},"next":{"id":"fb3114f4-8a22-5b2f-b89c-34635f604254","fields":{"slug":"/print_r-is-terrible"},"frontmatter":{"title":"print_r is terrible"}}},"pageContext":{"slug":"/the-problems-with-long-running-php","postDate":"2014-06-18 19:51:11 -0500","previous":"/rfc-engine-exceptions","next":"/print_r-is-terrible"}},"staticQueryHashes":["63159454"]}