{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/rfc-engine-exceptions","result":{"data":{"site":{"siteMetadata":{"title":"DEFINITIVELY NOT JAMES","author":"James Ward"}},"post":{"id":"026ef526-e96f-5d8b-8590-53a7558b9bcc","excerpt":"One of the flaws with PHP is the ways in which it handles engine errors.  However, might change in PHP 5.6. Most of the errors in PHP will emit a small amount…","html":"<p>One of the flaws with PHP is the ways in which it handles engine errors.  However, might change in PHP 5.6.</p>\n<p>Most of the errors in PHP will emit a small amount of text, call the error handler, and allow the engine to continue.\nHowever, there are a few errors which are emitted that do not call the error handler, and instead terminate the application.\nSpecifically, these are <code class=\"language-text\">E_ERROR</code>, <code class=\"language-text\">E_CORE_ERROR</code>, <code class=\"language-text\">E_COMPILE_ERROR</code>, <code class=\"language-text\">E_PARSE</code>, <code class=\"language-text\">E_USER_ERROR</code>, and <code class=\"language-text\">E_RECOVERABLE_ERROR</code>.  Of these,\nonly <code class=\"language-text\">E_RECOVERABLE_ERROR</code> calls the error handler, but it still will abort the running script if not handled correctly.</p>\n<p>Some of these errors are from seemingly innocuous conditions, such as calling methods on null values, creating incorrect SimpleXML, or\ntrying to load an invalid WSDL in SoapClient.  (If you’re using the SoapClient, though, you have other problems.)  Not only can one\nof the error conditions end a running script without allowing any cleanup, it also breaks several assumptions programmers can have.\nFor example, the <code class=\"language-text\">finally</code> construct and <code class=\"language-text\">__deconstruct</code> methods are always ran before PHP shuts down - unless of course a fatal error ends\nit early.  There are some hacks to handle these behaviors slightly better using <code class=\"language-text\">register_shutdown_function</code>, but they are just that.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token function\">set_error_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$errno</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errstr</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errfile</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">E_RECOVERABLE_ERROR</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$errno</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token variable\">$datetime</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>DateTime <span class=\"token variable\">$datetime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">datetime</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$datetime</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// A timestamp instead of a datetime object.</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1383329451</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// int(1383329451) - we've bypassed the hinting</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">datetime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Catching a recoverable fatal error may be even worse than handling an <code class=\"language-text\">E_ERROR</code>.  The code continues on once it is caught as if nothing happened.\nSituations like type hinting errors caught will allow input of the wrong type to be allowed through.  Even if you set an empty error handler that\ndoes not return anything, <code class=\"language-text\">E_RECOVERABLE_ERROR</code> will be silently ignored and PHP will blunder onward.</p>\n<p><code class=\"language-text\">EngineException</code> is the proposed solution to this problem, by Nikita Popov.  It is a move away from the errors of the past, towards catch-able\nExceptions where possible.  The RFC includes <code class=\"language-text\">E_ERROR</code> and <code class=\"language-text\">E_RECOVERABLE_ERROR</code> in the purge, though the attached patch as of this writing\nmostly only delves into a small portion of the errors, but it does include wording for developers to avoid using fatal errors, and instead\nuse exceptions where possible.  The following code would now work, where as of PHP 5.5, it does not.  </p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token variable\">$object</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$h</span> <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'lockfile'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">flock</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$h</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOCK_EX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token variable\">$object</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">flock</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$h</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOCK_UN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$h</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is a win for anyone who has written any long living PHP application, as well as for those who don’t want to rely on error handlers to\nmake an attempt to hastily exit from what should not be a catastrophic engine shutdown.</p>\n<p>While backwards compatibility woes threaten to halt this RFC faster than any <code class=\"language-text\">E_FATAL_ERROR</code>, it hopefully will push future development to not use fatal errors.</p>","fields":{"slug":"/rfc-engine-exceptions"},"frontmatter":{"title":"RFC: Engine Exception; Erroneous Exceptional Errors","date":"2013/11/06","time":"05:21 UTC"}},"previous":null,"next":{"id":"4f1de9b2-929e-5ecb-829a-2714c6fd85eb","fields":{"slug":"/the-problems-with-long-running-php"},"frontmatter":{"title":"The Problems with Long Running PHP scripts"}}},"pageContext":{"slug":"/rfc-engine-exceptions","postDate":"2013-11-06 00:21:11 -0500","previous":null,"next":"/the-problems-with-long-running-php"}},"staticQueryHashes":["63159454"]}